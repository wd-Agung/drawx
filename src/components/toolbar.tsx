/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/OjrjcrpYSAj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip"
import { Button } from "@/components/ui/button"
import {useState} from "react"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {useAtomValue} from "jotai";
import * as fabric from "fabric"
import {canvasAtom} from "@/atom";


export function Toolbar() {
  const canvas = useAtomValue(canvasAtom)
  const [color, setColor] = useState("#2ee")
  const [isDrawingMode, setIsDrawingMode] = useState(false)

  const handleColorChange = (color: string) => {
    setColor(color)
    if (canvas.freeDrawingBrush) {
      canvas.freeDrawingBrush.color = color
    }
  }

  const handleDrawingMode = () => {
    setIsDrawingMode(!isDrawingMode)
    canvas.isDrawingMode = !isDrawingMode
    canvas.freeDrawingBrush = new fabric.PencilBrush(canvas)
    if (canvas.freeDrawingBrush) {
      canvas.freeDrawingBrush.color = color
    }
  }

  const handleDeleteElements = () => {
    canvas.remove(...canvas.getActiveObjects())
    canvas.requestRenderAll()
  }

  return (
    <div className="flex items-center justify-center bg-background py-4 px-6 border-b">
      <div className="flex items-center gap-4">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                className={isDrawingMode ? "bg-blue-500" : ""}
                onClick={handleDrawingMode}
                variant="ghost"
                size="icon"
              >
                <PencilIcon className="w-5 h-5" />
                <span className="sr-only">Pencil</span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>Pencil</TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon">
                <HighlighterIcon className="w-5 h-5" />
                <span className="sr-only">Highlighter</span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>Highlighter</TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handleDeleteElements} variant="ghost" size="icon">
                <EraserIcon className="w-5 h-5" />
                <span className="sr-only">Eraser</span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>Eraser</TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon">
                <ShapesIcon className="w-5 h-5" />
                <span className="sr-only">Shape</span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>Shape</TooltipContent>
          </Tooltip>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button variant="ghost" size="icon">
                <TextIcon className="w-5 h-5" />
                <span className="sr-only">Text</span>
              </Button>
            </TooltipTrigger>
            <TooltipContent>Text</TooltipContent>
          </Tooltip>
          <Tooltip>
            <Popover>
              <PopoverTrigger>
                <TooltipTrigger asChild>
                  <Button className="bg-slate-200" style={{color: color}} variant="ghost" size="icon">
                    <PaletteIcon className="w-5 h-5"/>
                    <span className="sr-only">Color Picker</span>
                    {/*<div className="w-5 h-1 rounded-full" style={{background: color}}></div>*/}
                  </Button>
                </TooltipTrigger>
              </PopoverTrigger>
              <PopoverContent className="flex justify-between w-44">
                <div
                    onClick={() => handleColorChange("#000000")}
                    className="w-5 h-5 cursor-pointer rounded-full ring-1 ring-slate-200 bg-black"
                ></div>
                <div
                    onClick={() => handleColorChange("#ffffff")}
                    className="w-5 h-5 cursor-pointer rounded-full ring-1 ring-slate-200 bg-white"
                ></div>
                <div
                    onClick={() => handleColorChange("#f59e0b")}
                    className="w-5 h-5 cursor-pointer rounded-full ring-1 ring-slate-200 bg-amber-500"
                ></div>
                <div
                    onClick={() => handleColorChange("#ef4444")}
                    className="w-5 h-5 cursor-pointer rounded-full ring-1 ring-slate-200 bg-red-500"
                ></div>
                <div
                    onClick={() => handleColorChange("#3b82f6")}
                    className="w-5 h-5 cursor-pointer rounded-full ring-1 ring-slate-200 bg-blue-500"
                ></div>
              </PopoverContent>
            </Popover>
            <TooltipContent>Color Picker</TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
    </div>
  )
}

function EraserIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21" />
      <path d="M22 21H7" />
      <path d="m5 11 9 9" />
    </svg>
  )
}


function HighlighterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m9 11-6 6v3h9l3-3" />
      <path d="m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4" />
    </svg>
  )
}


function PaletteIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="13.5" cy="6.5" r=".5" fill="currentColor" />
      <circle cx="17.5" cy="10.5" r=".5" fill="currentColor" />
      <circle cx="8.5" cy="7.5" r=".5" fill="currentColor" />
      <circle cx="6.5" cy="12.5" r=".5" fill="currentColor" />
      <path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z" />
    </svg>
  )
}


function PencilIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
      <path d="m15 5 4 4" />
    </svg>
  )
}


function ShapesIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z" />
      <rect x="3" y="14" width="7" height="7" rx="1" />
      <circle cx="17.5" cy="17.5" r="3.5" />
    </svg>
  )
}


function TextIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 6.1H3" />
      <path d="M21 12.1H3" />
      <path d="M15.1 18H3" />
    </svg>
  )
}
